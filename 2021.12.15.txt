List详解：

1、void add(int index, E element)

在指定位置插入元素，后面的元素默认往后移一位

2、boolean addAll(int index, Collection<? extends E> c)

在指定的位置插入集合C的所有元素，如果集合发生改变，返回true，否则返回false

3、E get(int index)

返回指定索引的元素

4、int indexOf(Object o)

返回第一次出现O对象的索引

5、ListIterator<E> listIterator()

返回此列表元素的列表迭代器

6、ListIterator<E> listIterator(int index)

从指定位置开始返回此列表元素的列表迭代器

7、E remove(int index)

删除指定索引的对象

8、E set(int index,E element)

将索引为index位置的元素更改为element

9、List<E> subList(int fromIndex, int toIndex)

返回从索引fromIndex到toIndex的元素集合（就是截取列表指定索引之间的部分）


List踩坑

1、Arrays.asList()返回的东西并不是ArrayList，而是一个套娃Arrays$ArrayList(Arrays的私有静态内部类)不支持增删，而且在改动原数组的时候还有影响到这个套娃list，解决方法可以一个个转成ArrayList，也可以使用

List<String> list = new ArrayList<>(Arrays.asList(arrays));
或者
List<String> list = Lists.newArrayList(arrays);

这样子生成的ArrayList就支持增删了

2、List的subList方法会和原list相互影响

subList以后产生的新List实际上还是操作原有的List，解决方案跟上面的差不多，可以套一层 new ArrayList<>

3、不可变集合会变

生成不可变List 的方法ImmutableList.copyOf
List<String> list = new ArrayList<>(Arrays.asList("one", "two", "three"));
List<String> unmodifiableList = ImmutableList.copyOf(list);

4、不要随便在for i in list 这种foreach语句里面增加/删除元素

非得这么写就用迭代器
