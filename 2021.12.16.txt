Map详解

几个需要注意的点：

1、collection中的结合，元素是孤立存在的，向集合中存储元素采用一个个存储的方法
2、Map中的集合，元素是成对存在的，每个元素由键和值两个部分组成，通过键可以找到对应的值
3、Map中的集合为双列集合
4、Map种不可以包含相同的key，值可以重复，每个键只能对应一个值

Map中常用的集合为HashMap集合、LinkedHashMap集合

1、Map中的常用方法

A、get(Objec key)方法，返回指定键所映射的值
B、put(K key, V value)，将指定的值与此映射中的指定键关联
C、remove(Object key)，如果存在一个键的映射关系，则将其从此映射中移除

2、Map集合遍历键找值方法

方法一：键找值方法：通过元素中的键，获取键所对应的值

A、获取Map集合中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键
	keySet()方法
B、遍历键的Set集合，得到每一个键（通过迭代器Iterator）
C、根据键，获取键所对应的值
public class MapDemo {
    public static void main(String[] args) {
        //创建Map对象
        Map<String, String> map = new HashMap<String,String>();
        //给map中添加元素
        map.put("邓超", "孙俪");
        map.put("李晨", "范冰冰");
        map.put("刘德华", "柳岩");
        //获取Map中的所有key
        Set<String> keySet = map.keySet();
        //遍历存放所有key的Set集合
        Iterator<String> it =keySet.iterator();    **
        while(it.hasNext()){                         //利用了Iterator迭代器**
            //得到每一个key
            String key = it.next();
            //通过key获取对应的value
            String value = map.get(key);
            System.out.println(key+"="+value);
        }
    }
}

方法二：遍历键值对

A、获取Map集合中，所有的键值对对象，以Set集合形式返回
B、遍历包含键值对对象的Set集合，得到每一个键值对对象
C、通过键值对获取键和值


public class MapDemo {
    public static void main(String[] args) {
        //创建Map对象
        Map<String, String> map = new HashMap<String,String>();
        //给map中添加元素
        map.put("邓超", "孙俪");
        map.put("李晨", "范冰冰");
        map.put("刘德华", "柳岩");
        //获取Map中的所有key与value的对应关系
        Set<Map.Entry<String,String>> entrySet = map.entrySet();
        //遍历Set集合
        Iterator<Map.Entry<String,String>> it =entrySet.iterator();
        while(it.hasNext()){
            //得到每一对对应关系
            Map.Entry<String,String> entry = it.next();
            //通过每一对对应关系获取对应的key
            String key = entry.getKey();
            //通过每一对对应关系获取对应的value
            String value = entry.getValue();
            System.out.println(key+"="+value);
        }
    }
}

上面两种方法都是使用Iterator迭代器进行遍历，还可以使用foreach进行遍历

public class HashMapTest {
    public static void main(String[] args) {
        // 创建并赋值 HashMap
        Map<Integer, String> map = new HashMap();
        map.put(1, "Java");
        map.put(2, "JDK");
        map.put(3, "Spring Framework");
        map.put(4, "MyBatis framework");
        map.put(5, "Java中文社群");
        // 遍历
        for (Map.Entry<Integer, String> entry : map.entrySet()) {
            System.out.print(entry.getKey());
            System.out.print(entry.getValue());
        }
    }
}

public class HashMapTest {
    public static void main(String[] args) {
        // 创建并赋值 HashMap
        Map<Integer, String> map = new HashMap();
        map.put(1, "Java");
        map.put(2, "JDK");
        map.put(3, "Spring Framework");
        map.put(4, "MyBatis framework");
        map.put(5, "Java中文社群");
        // 遍历
        for (Integer key : map.keySet()) {
            System.out.print(key);
            System.out.print(map.get(key));
        }
    }
}


十大排序算法

